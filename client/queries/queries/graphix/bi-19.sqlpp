/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

USE      SNB.Native;
DECLARE  GRAPH SNBGraph19 AS
VERTEX   (:Person)
         PRIMARY KEY (id)
         AS Users,
EDGE     (:Person)-[:KNOWS]->(:Person)
         SOURCE KEY (startId)
         DESTINATION KEY (endId)
         AS ( FROM     GRAPH SNBGraph
              MATCH    (personA:Person)-[:KNOWS]->(personB:Person),
                       (personA)<-[:HAS_CREATOR]-(:Message)-[:REPLY_OF]-(:Message)-[:HAS_CREATOR]->(personB)
              GROUP BY personA,
                       personB
              SELECT   personA.id AS startId,
                       personB.id AS endId,
                       1.0 / COUNT(*) AS weight );

FROM     GRAPH SNBGraph19
MATCH    (city1:City)<-[:IS_LOCATED_IN]-(person1:Person)-[k:KNOWS+]->(person2:Person),
         (person2)-[:IS_LOCATED_IN]->(city2:City)
WHERE    city1.id = $city1Id AND
         city2.id = $city2Id
GROUP BY person1,
         person2
GROUP AS g
LET      cheapestPath = ( FROM     g gi
                          LET      cost = ( FROM   EDGES(gi.k) ke
                                            SELECT VALUE SUM(ke.weight) )[0]
                          SELECT   cost
                          ORDER BY cost ASC
                          LIMIT    1 )[0]
SELECT   person1.id AS person1id,
         person2.id AS person2id,
         shortestPath.cost AS totalWeight
ORDER BY person1id ASC,
         person2id ASC;