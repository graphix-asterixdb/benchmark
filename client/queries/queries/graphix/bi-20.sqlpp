/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

USE     SNB.Native;
DECLARE GRAPH SNBGraph20 AS
VERTEX  (:Person)
        PRIMARY KEY (id)
        AS Users,
VERTEX  (:Company)
        PRIMARY KEY (id)
        AS Companies,
EDGE    (:Person)-[:WORK_AT]->(:Company)
        SOURCE KEY (id)
        DESTINATION KEY (organizationId)
        AS ( FROM   Persons p
             UNNEST p.companies c
             SELECT p.id,
                    c.organizationId,
                    c.workFrom ),
EDGE    (:Person)-[:KNOWS]->(:Person)
        SOURCE KEY (startId)
        DESTINATION KEY (endId)
        AS ( FROM     GRAPH SNBGraph
             MATCH    (personA:Person)-[:KNOWS]->(personB:Person),
                      (personA)-[saA:STUDY_AT]->(:University)<-[saB:STUDY_AT]-(personB)
             GROUP BY personA,
                      personB
             GROUP AS g
             LET      weight = ( FROM   g gi
                                 LET    classYearDiff = ABS(gi.saA.classYear - gi.saB.classYear)
                                 SELECT VALUE MIN(classYearDiff) + 1 )[0]
             SELECT   personA.id AS startId,
                      personB.id AS endId,
                      weight );
);

FROM    ( FROM     GRAPH SNBGraph20
          MATCH    (company:Company)<-[:WORK_AT]-(person1:Person)-[k:KNOWS+]->(person2:Person)
          WHERE    company.name = $company AND
                   person2.id = $person2Id
          GROUP BY person1,
                   person2
          GROUP AS g
          LET      cheapestPath = ( FROM     g gi
                                    LET      cost = ( FROM   EDGES(gi.k) ke
                                                      SELECT VALUE SUM(ke.weight) )[0]
                                    SELECT   cost
                                    ORDER BY cost ASC
                                    LIMIT    1 )[0]
          SELECT   person1.id AS person1id,
                   cheapestPath.cost AS totalWeight
          ORDER BY totalWeight ASC,
                   person1id ASC ) t
WHERE   t.totalWeight = ( FROM   temp ti
                          SELECT VALUE MIN(ti.totalWeight) )[0]
SELECT  VALUE t;

