/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

SET      `compiler.cbo` "false";
LET      idPairs = ( FROM   GRAPH SNB.Native.SNBGraph
                     MATCH  (tag:Tag WHERE tag.name = $tag),
                            (tag)<-/*+indexnl*/[:HAS_INTEREST]-(person:Person),
                            (person)-/*+indexnl*/[:KNOWS]->(mutualFriend:Person)
                     SELECT person.id AS personId,
                            mutualFriend.id AS friendId )
FROM     idPairs idp1,
         idPairs idp2
LET      mutualFriendId = idp1.friendId,
         person1Id = idp1.personId,
         person2Id = idp2.personId
WHERE    idp1.friendId = idp2.friendId AND
         person1Id != person2Id AND
         NOT EXISTS ( FROM   GRAPH SNB.Native.SNBGraph
                      MATCH  (person1:Person)-[:KNOWS]->(person2:Person)
                      WHERE  person1.id /*+indexnl*/ = person1Id AND
                             person2.id /*+indexnl*/ = person2Id
                      SELECT VALUE 1 )
GROUP BY person1Id,
         person2Id
SELECT   person1Id,
         person2Id,
         COUNT(DISTINCT mutualFriendId) AS mutualFriendCount
ORDER BY mutualFriendCount DESC,
         person1Id ASC,
         person2Id ASC
LIMIT    $limit;
