/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

SET       `compiler.groupmemory` "8MB";
SET       `compiler.sortmemory` "8MB";
SET       `compiler.joinmemory` "8MB";
FROM      GRAPH SNB.Native.SNBGraph3
MATCH     (person:Person WHERE person.id = $personId),
          (person:Person)-[p:KNOWS{1,3}]->(otherPerson:Person),
          (otherPerson)-[:IS_LOCATED_IN]->(locationCity:City)
LET       companies    = ( FROM   GRAPH SNB.Native.SNBGraph
                           MATCH  (otherPerson)-[w:WORK_AT]->(company:Company),
                                  (company)-[:IS_LOCATED_IN]->(companyCountry:Country)
                           SELECT company.name AS companyName,
                                  w.workFrom,
                                  companyCountry.name AS countryName ),
          universities = ( FROM   GRAPH SNB.Native.SNBGraph
                           MATCH  (otherPerson)-[s:STUDY_AT]->(university:University),
                                  (university)-[:IS_LOCATED_IN]->(universityCity:City)
                           SELECT university.name AS universityName,
                                  s.classYear,
                                  universityCity.name AS cityName )
WHERE    otherPerson.firstName = $firstName
GROUP BY otherPerson,
         locationCity,
         companies,
         universities
SELECT   otherPerson.id AS friendId,
         otherPerson.lastName AS friendLastName,
         MIN(PATH_HOP_COUNT(p)) AS distanceFromPerson,
         UNIX_TIME_FROM_DATE_IN_MS(otherPerson.birthday) AS friendBirthday,
         UNIX_TIME_FROM_DATETIME_IN_MS(otherPerson.creationDate) AS friendCreationDate,
         otherPerson.gender AS friendGender,
         otherPerson.browserUsed AS friendBrowserUsed,
         otherPerson.locationIP AS friendLocationIp,
         otherPerson.email AS friendEmails,
         otherPerson.speaks AS friendLanguages,
         locationCity.name AS friendCityName,
         universities AS friendUniversities,
         companies AS friendCompanies
ORDER BY distanceFromPerson ASC,
         otherPerson.lastName ASC,
         otherPerson.id ASC
LIMIT    $limit;
