/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
SET     `graphix.semantics.pattern` "homomorphism";
WITH    sourceMessages AS ( FROM      GRAPH SNB.Native.SNBGraph
                            MATCH     (post:Message)
                            WHERE     post.isPost = TRUE
                            SELECT    post,
                                      post AS message
                            UNION ALL
                            FROM      GRAPH SNB.Native.SNBGraph
                            MATCH     (message:Message)-[:REPLY_OF+]->(post:Message)
                            WHERE     post.isPost = TRUE
                            SELECT    post,
                                      message )
FROM     GRAPH SNB.Native.SNBGraph
MATCH    (person1:Person)<-[:HAS_CREATOR]-(message1:Message)-[:HAS_TAG]->(tag:Tag),
         (post1:Message)<-[:CONTAINER_OF]-(forum1:Forum),
         (forum1)-[:HAS_MEMBER]->(person2:Person)<-[:HAS_CREATOR]-(comment:Message),
         (forum1)-[:HAS_MEMBER]->(person3:Person)<-[:HAS_CREATOR]-(message2:Message),
         (tag)<-[:HAS_TAG]-(comment)-[:REPLY_OF]->(message2)-[:HAS_TAG]->(tag),
         (post2:Message)<-[:CONTAINER_OF]-(forum2:Forum)
JOIN     sourceMessages sm1
ON       sm1.post.id = post1.id AND
         sm1.message.id = message1.id
JOIN     sourceMessages sm2
ON       sm2.post.id = post2.id AND
         sm2.message.id = message2.id
WHERE    forum1 <> forum2 AND
         tag.name = $tag AND
         comment.isPost = FALSE AND
         person2 <> person3 AND
         message2.creationDate > message1.creationDate + DURATION("P" + $delta + "H") AND
         NOT EXISTS ( FROM   GRAPH SNB.Native.SNBGraph
                      MATCH  (forum2)-[:HAS_MEMBER]->(person1)
                      SELECT VALUE 1 )
GROUP BY person1.id
SELECT   person1.id,
         COUNT(DISTINCT message2) AS messageCount
ORDER BY messageCount DESC,
         person1.id ASC
LIMIT    $limit;
