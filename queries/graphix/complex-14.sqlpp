//       :param person1Id: 933
//       :param person2Id: 102

USE      SNB.Native;
DECLARE  GRAPH SNBGraph14 AS
VERTEX   (:Person)
         PRIMARY KEY (id)
         AS Users,
EDGE     (:Person)-[:KNOWS]->(:Person)
         SOURCE KEY (startId)
         DESTINATION KEY (endId)
         AS ( FROM     GRAPH SNBGraph
              MATCH    (personA:Person)-[:KNOWS]-(personB:Person),
                       (personA)<-[:HAS_CREATOR]-(m1:Message)-[:REPLY_OF]-(m2:Message)-[:HAS_CREATOR]->(personB)
              GROUP BY personA,
                       personB
              GROUP AS g
              LET      w1 = ( FROM   g gi
                              WHERE  gi.m1.isPost = TRUE OR
                                     gi.m2.isPost = TRUE
                              SELECT VALUE COUNT(*) )[0],
                       w2 = ( FROM   g gi
                              WHERE  gi.m1.isPost = FALSE OR
                                     gi.m2.isPost = FALSE
                              SELECT VALUE COUNT(*) )[0] * 0.5,
              SELECT   personA.id AS startId,
                       personB.id AS endId,
                       w1 + w2 AS weight );

FROM     GRAPH SNBGraph14
MATCH    (person1:Person)-[k:KNOWS14{1,4}]->(person2:Person)
WHERE    person1.id = $person1Id AND
         person2.id = $person2Id
GROUP BY person1,
         person2
GROUP AS g
LET      cheapestPath = ( FROM     g gi
                          LET      ids  = ( FROM   VERTICES(gi.k) kv
                                            SELECT VALUE kv.id ),
                                   cost = ( FROM   EDGES(gi.k) ke
                                            SELECT VALUE SUM(ke.weight) )[0]
                          SELECT   ids,
                                   cost
                          ORDER BY PATH_HOP_COUNT(gi.k) ASC
                          LIMIT    1 )[0]
SELECT   cheapestPath.ids AS personIdsInPath,
         cheapestPath.length AS pathWeight
ORDER BY pathWeight DESC;
