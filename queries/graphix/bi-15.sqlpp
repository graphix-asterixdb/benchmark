//       :param person1Id: 933
//       :param person2Id: 4398046512764
//       :param startDate: 1313579421570
//       :param endDate: 1342803345373

USE      SNB.Native;
DECLARE  GRAPH SNBGraph15 AS
VERTEX   (:Person)
         PRIMARY KEY (id)
         AS Users,
EDGE     (:Person)-[:KNOWS]->(:Person)
         SOURCE KEY (startId)
         DESTINATION KEY (endId)
         AS ( FROM   GRAPH SNBGraph
              MATCH  (personA:Person)-[:KNOWS]->(personB:Person)
              LET    w1 = ( FROM   GRAPH SNBGraph
                            MATCH  (personA)<-[:HAS_CREATOR]-(comment:Message)-[:REPLY_OF]->(post:Message),
                                   (post)-[:HAS_CREATOR]->(personB),
                                   (post)<-[:CONTAINER_OF]-(forum:Forum)
                            WHERE  comment.isPost = FALSE AND
                                   post.isPost = TRUE AND
                                   forum.creationDate >= $startDate AND
                                   forum.creationDate <= $endDate
                            SELECT VALUE COUNT(comment) )[0],
                     w2 = ( FROM   GRAPH SNBGraph
                            MATCH  (personA)<-[:HAS_CREATOR]-(post:Message)<-[:REPLY_OF]-(comment:Message),
                                   (comment)-[:HAS_CREATOR]->(personB),
                                   (post)<-[:CONTAINER_OF]-(forum:Forum)
                            WHERE  comment.isPost = FALSE AND
                                   post.isPost = TRUE AND
                                   forum.creationDate >= $startDate AND
                                   forum.creationDate <= $endDate
                            SELECT VALUE COUNT(comment) )[0],
                     w3 = ( FROM   GRAPH SNBGraph
                            MATCH  (personA)<-[:HAS_CREATOR]-(c1:Message)-[:REPLY_OF]->(c2:Message),
                                   (c2)-[:HAS_CREATOR]->(personB),
                                   (c2)-[:REPLY_OF{1,2}]->(post:Message)<-[:CONTAINER_OF]-(forum:Forum)
                            WHERE  c1.isPost = FALSE AND
                                   c2.isPost = FALSE AND
                                   post.isPost = TRUE AND
                                   forum.creationDate >= $startDate AND
                                   forum.creationDate <= $endDate
                            SELECT VALUE COUNT(c1) )[0],
                     w4 = ( FROM   GRAPH SNBGraph
                            MATCH  (personA)<-[:HAS_CREATOR]-(c2:Message)<-[:REPLY_OF]-(c1:Message),
                                   (c1)-[:HAS_CREATOR]->(personB),
                                   (c2)-[:REPLY_OF{1,2}]->(post:Message)<-[:CONTAINER_OF]-(forum:Forum)
                            WHERE  c1.isPost = FALSE AND
                                   c2.isPost = FALSE AND
                                   post.isPost = TRUE AND
                                   forum.creationDate >= $startDate AND
                                   forum.creationDate <= $endDate
                            SELECT VALUE COUNT(c1) )[0]
              SELECT personA.id AS startId,
                     personB.id AS endId,
                     1.0 / (w1 + w2 + ( 0.5 * (w3 + w4) ) + 1) AS weight );

FROM     GRAPH SNBGraph15
MATCH    (person1:Person)-[k:KNOWS{1,3}]-(person2:Person)
WHERE    person1.id = $person1Id AND
         person2.id = $person2Id
GROUP BY person1,
         person2
GROUP AS g
LET      cheapestPath = ( FROM     g gi
                          LET      cost = ( FROM   EDGES(gi.k) ke
                                            SELECT VALUE SUM(ke.weight) )[0]
                          SELECT   cost
                          ORDER BY cost ASC
                          LIMIT    1 )[0]
SELECT   shortestPath.cost AS totalWeight
LIMIT    1;