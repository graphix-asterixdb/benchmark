USE    SNB.Native;
DROP   GRAPH SNBGraph IF EXISTS;
CREATE GRAPH SNBGraph AS

VERTEX (:Message)
       PRIMARY KEY (id)
       AS Messages,
VERTEX (:Forum)
       PRIMARY KEY (id)
       AS Forums,
VERTEX (:Person)
       PRIMARY KEY (id)
       AS Persons,
VERTEX (:Tag)
       PRIMARY KEY (id)
       AS Tags,
VERTEX (:TagClass)
       PRIMARY KEY (id)
       AS TagClasses,
VERTEX (:University)
       PRIMARY KEY (id)
       AS Universities,
VERTEX (:Company)
       PRIMARY KEY (id)
       AS Companies,
VERTEX (:City)
       PRIMARY KEY (id)
       AS Cities,
VERTEX (:Country)
       PRIMARY KEY (id)
       AS Countries,
VERTEX (:Continent)
       PRIMARY KEY (id)
       AS Continents,

EDGE   (:Message)-[:REPLY_OF]->(:Message)
       SOURCE KEY (id)
       DESTINATION KEY (replyOfMessageId)
       AS ( FROM   Messages m
            WHERE  m.isPost = FALSE
            SELECT m.id,
                   m.replyOfMessageId ),
EDGE   (:Message)-[:HAS_CREATOR]->(:Person)
       SOURCE KEY (id)
       DESTINATION KEY (creatorId)
       AS ( FROM   Messages m
            SELECT m.id,
                   m.creatorId ),
EDGE   (:Message)-[:IS_LOCATED_IN]->(:Country)
       SOURCE KEY (id)
       DESTINATION KEY (placeId)
       AS ( FROM   Messages m
            SELECT m.id,
                   m.placeId ),
EDGE   (:Message)-[:HAS_TAG]->(:Tag)
       SOURCE KEY (id)
       DESTINATION KEY (tagId)
       AS ( FROM   Messages m
            UNNEST m.tags tagId
            SELECT m.id,
                   tagId ),
EDGE   (:Forum)-[:CONTAINER_OF]->(:Message)
       SOURCE KEY (forumId)
       DESTINATION KEY (id)
       AS ( FROM   Messages m
            WHERE  m.isPost = TRUE
            SELECT m.id,
                   m.forumId ),
EDGE   (:Forum)-[:HAS_MODERATOR]->(:Person)
       SOURCE KEY (id)
       DESTINATION KEY (moderatorId)
       AS ( FROM   Forums f
            SELECT f.id,
                   f.moderatorId ),
EDGE   (:Forum)-[:HAS_MEMBER]->(:Person)
       SOURCE KEY (forumId)
       DESTINATION KEY (personId)
       AS ( FROM   ForumPerson fp
            SELECT fp.* ),
EDGE   (:Forum)-[:HAS_TAG]->(:Tag)
       SOURCE KEY (id)
       DESTINATION KEY (tagId)
       AS ( FROM   Forums f
            UNNEST f.tags tagId
            SELECT f.id,
                   tagId ),
EDGE   (:Person)-[:KNOWS]->(:Person)
       SOURCE KEY (startId)
       DESTINATION KEY (endId)
       AS ( FROM   Knows k
            SELECT k.* ),
EDGE   (:Person)-[:HAS_INTEREST]->(:Tag)
       SOURCE KEY (personId)
       DESTINATION KEY (tagId)
       AS ( FROM   PersonTag pt
            SELECT pt.* ),
EDGE   (:Person)-[:IS_LOCATED_IN]->(:City)
       SOURCE KEY (id)
       DESTINATION KEY (placeId)
       AS ( FROM Persons p
            SELECT p.id,
                   p.placeId ),
EDGE   (:Person)-[:STUDY_AT]->(:University)
       SOURCE KEY (id)
       DESTINATION KEY (organizationId)
       AS ( FROM   Persons p
            UNNEST p.universities u
            SELECT p.id,
                   u.organizationId,
                   u.classYear ),
EDGE   (:Person)-[:WORK_AT]->(:Company)
       SOURCE KEY (id)
       DESTINATION KEY (organizationId)
       AS ( FROM   Persons p
            UNNEST p.companies c
            SELECT p.id,
                   c.organizationId,
                   c.workFrom ),
EDGE   (:Person)-[:LIKES]->(:Message)
       SOURCE KEY (personId)
       DESTINATION KEY (messageId)
       AS ( FROM   Likes l
            SELECT l.* ),
EDGE   (:Tag)-[:HAS_TYPE]->(:TagClass)
       SOURCE KEY (id)
       DESTINATION KEY (tagClassId)
       AS ( FROM   Tags t
            SELECT t.id,
                   t.tagClassId ),
EDGE   (:TagClass)-[:IS_SUBCLASS_OF]->(:TagClass)
       SOURCE KEY (id)
       DESTINATION KEY (isSubclassOf)
       AS ( FROM   TagClasses tc
            SELECT tc.id,
                   tc.isSubclassOf ),
EDGE   (:University)-[:IS_LOCATED_IN]->(:City)
       SOURCE KEY (id)
       DESTINATION KEY (placeId)
       AS ( FROM   Universities u
            SELECT u.id,
                   u.placeId ),
EDGE   (:Company)-[:IS_LOCATED_IN]->(:Country)
       SOURCE KEY (id)
       DESTINATION KEY (placeId)
       AS ( FROM   Companies c
            SELECT c.id,
                   c.placeId ),
EDGE   (:City)-[:IS_PART_OF]->(:Country)
       SOURCE KEY (id)
       DESTINATION KEY (containerId)
       AS ( FROM   Cities c
            SELECT c.id,
                   c.containerId ),
EDGE   (:Country)-[:IS_PART_OF]->(:Continent)
       SOURCE KEY (id)
       DESTINATION KEY (containerId)
       AS ( FROM   Countries c
            SELECT c.id,
                   c.containerId );
